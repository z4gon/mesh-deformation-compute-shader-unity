// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel DeformVertices

#include "./shared/Vertex.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
StructuredBuffer<Vertex> InitialVertices;
RWStructuredBuffer<Vertex> DeformedVertices;
float Time;
float Radius;

[numthreads(1,1,1)]
void DeformVertices (uint3 id : SV_DispatchThreadID)
{
    Vertex v = InitialVertices[id.x];
    float3 spherePosition = normalize(v.position) * Radius;
    float3 sphereNormal = normalize(v.position) * Radius;

    float progress = sin(Time);

    v.position = lerp(spherePosition, v.position, progress);
    v.normal = lerp(sphereNormal, v.normal, progress);

    DeformedVertices[id.x] = v;
}
